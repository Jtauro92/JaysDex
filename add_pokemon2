from hmac import new
from database import dex,type_list,attributes
from Pokemon import Pokemon
import msvcrt as m



def minput():
        m.kbhit()
        return m.getch()
new_pokemon = Pokemon()

class Add_Pokemon(Pokemon):
    def __init__(self):
        super().__init__()

    def set_Name(self):
        while True:
            np = Pokemon(input('Enter Pokemon Name: '))
            if np.name == '0':
                return
            elif np.name == None:
                print('Invalid!')
            elif np.in_pokedex():
                print('Pokemon already exists!')
            else:
                return np.name
            
    def get_Number(self):
        while True:
            np = Pokemon(number= input('Enter Pokemon Number: '))
            if np.number == 0:
                return
            elif np.number == None:
                print('Invalid!')
            elif np.in_pokedex():
                print('Pokemon already exists!')
            else:
                return np.number

    def get_Type(self):
        np = Pokemon(type= input('Enter Pokemon Type: '))
        if np.type1 == '0':
            return
        elif np.type1 == None:
            print('Type not found!')
        else:
            return np.type1
        
    def prompt_generator(self):
        string = 'Enter Pokemon Ability: '
        prompt_list = [string, string.replace('Ability', 'Second Ability'), string.replace('Ability', 'Hidden Ability')]
        for i in prompt_list:
            yield i

    def get_ability(self):
        ability_list = []
        prompt = self.prompt_generator()

        for i in range(3):
            if i == 1:
                while True:
                    pokemon = Pokemon(ability=input(next(prompt)))
                    if pokemon.ability == '0':
                        print('Exiting...')
                                        
                    if pokemon.ability == None:
                        print('Ability not found!')
                
                    else:
                        ability_list.append(pokemon.ability)
                    
                
        for a in ability_list:
            yield a
                        



        
        
    def main(self):
        global new_pokemon
        while True:
            print ('Enter 0 to exit')
            new_pokemon.name = self.set_Name()
            if new_pokemon.name == None:
                return
                
            new_pokemon.number = self.get_Number()
            if new_pokemon.number == None:
                    return
                
            new_pokemon.type1 = self.get_Type()
            if new_pokemon.type1 == None:
                return
                
            new_pokemon.type2 = self.get_Type()
            if new_pokemon.type2_equals_type1():
                new_pokemon.type2 = None
                
    def test_ability(self):
        global new_pokemon
        try:
            self.ability = next(self.get_ability())
        except StopIteration:
            return

 
                
            
        

if __name__ == "__main__":
    AD = Add_Pokemon()
    AD.test_ability()
    print(AD.ability)
