from database import dex,type_list,attributes
from Pokemon import Pokemon as P
import msvcrt as m



def minput():
        m.kbhit()
        return m.getch()

class Add_Pokemon():
    def __init__(self):
        self.ability_list = []
        self.new_pokemon = P()

    def set_Name(self):
        while True:
            name = input('Enter Pokemon Name: ').title()
            if name == '0':
                print('Exiting...')
                return
            if name.isnumeric():
                print('Invalid Name!')
                continue
            if self.new_pokemon.validate_pokemon(name) is False:
                self.new_pokemon.name = name
                break
            
    def get_name(self):
        return self.new_pokemon
        
    def get_Number(self):
        while True:
            number = P(number= input('Enter Pokemon Number: ')).number
            if number == 0:
                print('Exiting...')
                return
            if number is False:
                continue
            if number is None:
                continue
            else:
                return number

    def get_Type(self):
        np = P(type= input('Enter Pokemon Type: '))
        if np.type1 == '0':
            return
        elif np.type1 == None:
            print('Type not found!')
        else:
            return np.type1
        
    def prompt_generator(self):
        string = 'Enter Pokemon Ability: '
        prompt_list = [string, string.replace('Ability', 'Second Ability'), string.replace('Ability', 'Hidden Ability')]
        for i in prompt_list:
            yield i

    def get_ability(self):
        prompt = self.prompt_generator()

        for i in range(3):
            try:
                while True:
                    ability = (input(next(prompt)))
                    if ability == '0':
                            print('Exiting...')
                            prompt = self.prompt_generator()
                            return
                    if ability == False:
                            print('Ability not found!')
                            prompt = self.prompt_generator()
                    if i == 0:
                       pass 
                    elif i == 1:
                        if ability == None:
                            while True:
                                print('Ability not found!')
                                prompt = self.prompt_generator()
                            if pokemon.has_same_ability():
                                print('Ability already exists!')
                                prompt = self.prompt_generator()

                    elif i == 2:
                        pokemon = Pokemon(ability=input(next(prompt)))
                        if pokemon.ability == '0':
                            print('Exiting...')
                            prompt = self.prompt_generator()
                            return
                        elif pokemon.ability == None:
                            print('Ability not found!')
                            prompt = next(self.prompt_generator())
                        
                    yield ability
            except (TypeError,StopIteration):
                self.ability_list = []
                prompt = self.prompt_generator()
                break
              
    def get_new_pokemon(self):
        try:
            new_pokemon = Pokemon(nam=self.set_Name())
            if new_pokemon.name == None:
                pass

                         
        except AttributeError:
            return
                              
        return new_pokemon
            
            
  



                        



        
        
    def main(self):
        global new_pokemon
        while True:
            print ('Enter 0 to exit')
            new_pokemon.name = self.set_Name()
            if new_pokemon.name == None:
                return
                
            new_pokemon.number = self.get_Number()
            if new_pokemon.number == None:
                    return
                
            new_pokemon.type1 = self.get_Type()
            if new_pokemon.type1 == None:
                return
                
            new_pokemon.type2 = self.get_Type()
            if new_pokemon.type2_equals_type1():
                new_pokemon.type2 = None
                
    def test_ability(self):
        global new_pokemon
        ability = AD.get_ability()
        try:
            self.ability = next(ability)
            self.ability2 = next(ability)
            self.h_ability = next(ability)
        except StopIteration:
            return
    


if __name__ == "__main__":
    AD = Add_Pokemon()

    AD.set_Name()
    print(AD.get_name())
